setwd('D:\\PhD FE\\Empirical-Asset-Pricing\\Assignment 1')
spx_index_values = read.csv('spx_index_values.csv', header = TRUE)
spx_index_values$Return = rep(0, dim(spx_index_values)[1])
spx_index_values$Return[2:length(spx_index_values$Return)] =
spx_index_values$SPX.Index[2:length(spx_index_values$SPX.Index)] /
spx_index_values$SPX.Index[1:(length(spx_index_values$SPX.Index)-1)] - 1
`# add the moving average of the rates to the plot, ggplot?
return.data = spx_index_values$Return
n.length = length(return.data)
emp.moment.1 = mean(return.data)
emp.moment.2 = 1/(n.length-1)*sum((return.data - emp.moment.1)^2)
emp.moment.4 = 1/(n.length-1)*sum((return.data - emp.moment.1)^4)
emp.moment.6 = 1/(n.length-1)*sum((return.data - emp.moment.1)^6)
spx_index_values = read.csv('spx_index_values.csv', header = TRUE)
spx_index_values$Return = rep(0, dim(spx_index_values)[1])
spx_index_values$Return[2:length(spx_index_values$Return)] =
spx_index_values$SPX.Index[2:length(spx_index_values$SPX.Index)] /
spx_index_values$SPX.Index[1:(length(spx_index_values$SPX.Index)-1)] - 1
return.data = spx_index_values$Return
n.length = length(return.data)
emp.moment.1 = mean(return.data)
emp.moment.2 = 1/(n.length-1)*sum((return.data - emp.moment.1)^2)
emp.moment.4 = 1/(n.length-1)*sum((return.data - emp.moment.1)^4)
emp.moment.6 = 1/(n.length-1)*sum((return.data - emp.moment.1)^6)
emp.moment.1
emp.moment.2
mu = 0
sigma.square = 0.0001
lambda = 0.04
delta.square = 0.0005
theo.moment.1 = mu - sigma.square / 2
teho.moment.2 = sigma.square + lambda * delta.square
theo.moment.4 = 3 * ((sigma.square+lambda*delta.square)^2 + lambda*delta.square^2)
theo.moment.6 = 15 * ((sigma.square+lambda*delta.square)^2 + 3*lambda*delta.square*(sigma.square+lambda*delta.square)+lambda*delta.square^3)
least.square.obj = (theo.moment.1 - emp.moment.1)^2 + (theo.moment.2 - emp.moment.2)^2 + (theo.moment.4 - emp.moment.4)^2 + (theo.moment.6 - emp.moment.6)^2
mu = 0
sigma.square = 0.0001
lambda = 0.04
delta.square = 0.0005
theo.moment.1 = mu - sigma.square / 2
teho.moment.2 = sigma.square + lambda * delta.square
theo.moment.4 = 3 * ((sigma.square+lambda*delta.square)^2 + lambda*delta.square^2)
theo.moment.6 = 15 * ((sigma.square+lambda*delta.square)^2 + 3*lambda*delta.square*(sigma.square+lambda*delta.square)+lambda*delta.square^3)
least.square.obj = (theo.moment.1 - emp.moment.1)^2 + (theo.moment.2 - emp.moment.2)^2 + (theo.moment.4 - emp.moment.4)^2 + (theo.moment.6 - emp.moment.6)^2
theo.moment.2 = sigma.square + lambda * delta.square
least.square.obj = (theo.moment.1 - emp.moment.1)^2 + (theo.moment.2 - emp.moment.2)^2 + (theo.moment.4 - emp.moment.4)^2 + (theo.moment.6 - emp.moment.6)^2
least.square.obj
moment.diff = function(mu, sigma.square, lambda, delta.square){
theo.moment.1 = mu - sigma.square / 2
theo.moment.2 = sigma.square + lambda * delta.square
theo.moment.4 = 3 * ((sigma.square+lambda*delta.square)^2 + lambda*delta.square^2)
theo.moment.6 = 15 * ((sigma.square+lambda*delta.square)^2 + 3*lambda*delta.square*(sigma.square+lambda*delta.square)+lambda*delta.square^3)
least.square.obj = (theo.moment.1 - emp.moment.1)^2 + (theo.moment.2 - emp.moment.2)^2 + (theo.moment.4 - emp.moment.4)^2 + (theo.moment.6 - emp.moment.6)^2
}
optim(c(0, 0.0001, 0.04, 0.0005), moment.diff)
optim(r(0, 0.0001, 0.04, 0.0005), moment.diff)
moment.diff = function(data.input){
mu = data.input[1]
sigma.square = data.input[2]
lambda = data.input[3]
delta.square = data.input[4]
theo.moment.1 = mu - sigma.square / 2
theo.moment.2 = sigma.square + lambda * delta.square
theo.moment.4 = 3 * ((sigma.square+lambda*delta.square)^2 + lambda*delta.square^2)
theo.moment.6 = 15 * ((sigma.square+lambda*delta.square)^2 + 3*lambda*delta.square*(sigma.square+lambda*delta.square)+lambda*delta.square^3)
least.square.obj = (theo.moment.1 - emp.moment.1)^2 + (theo.moment.2 - emp.moment.2)^2 + (theo.moment.4 - emp.moment.4)^2 + (theo.moment.6 - emp.moment.6)^2
}
optim(c(0, 0.0001, 0.04, 0.0005), moment.diff)
optim(c(0, 0.0001, 0.03, 0.0005), moment.diff)
1e15
1e15/100
moment.diff = function(data.input){
mu = data.input[1]
sigma.square = data.input[2]
lambda = data.input[3]
delta.square = data.input[4]
theo.moment.1 = mu - sigma.square / 2
theo.moment.2 = sigma.square + lambda * delta.square
theo.moment.4 = 3 * ((sigma.square+lambda*delta.square)^2 + lambda*delta.square^2)
theo.moment.6 = 15 * ((sigma.square+lambda*delta.square)^2 + 3*lambda*delta.square*(sigma.square+lambda*delta.square)+lambda*delta.square^3)
least.square.obj = 1e15*(theo.moment.1 - emp.moment.1)^2 + (theo.moment.2 - emp.moment.2)^2 + (theo.moment.4 - emp.moment.4)^2 + (theo.moment.6 - emp.moment.6)^2
}
optim(c(0, 0.0001, 0.03, 0.0005), moment.diff)
optim(c(0, 0.01, 0.03, 0.0005), moment.diff)
optim(c(0, 0.01, 0.03, 0.0005), moment.diff)
theo.moment.1
emp.moment.1
emp.moment.2
sqrt(emp.moment.1)
sqrt(emp.moment.2)
moment.diff = function(data.input){
mu = data.input[1]
sigma.square = data.input[2]
lambda = data.input[3]
delta.square = data.input[4]
theo.moment.1 = mu - sigma.square / 2
theo.moment.2 = sigma.square + lambda * delta.square
theo.moment.4 = 3 * ((sigma.square+lambda*delta.square)^2 + lambda*delta.square^2)
theo.moment.6 = 15 * ((sigma.square+lambda*delta.square)^2 + 3*lambda*delta.square*(sigma.square+lambda*delta.square)+lambda*delta.square^3)
least.square.obj = (theo.moment.1 - emp.moment.1)^2 + (theo.moment.2 - emp.moment.2)^2 + (theo.moment.4 - emp.moment.4)^2 + (theo.moment.6 - emp.moment.6)^2
}
optim(c(0, 0.01, 0.03, 0.0005), moment.diff)
moment.diff = function(data.input){
mu = data.input[1]
sigma.square = data.input[2]
lambda = data.input[3]
delta.square = data.input[4]
theo.moment.1 = mu - sigma.square / 2
theo.moment.2 = sigma.square + lambda * delta.square
theo.moment.4 = 3 * ((sigma.square+lambda*delta.square)^2 + lambda*delta.square^2)
theo.moment.6 = 15 * ((sigma.square+lambda*delta.square)^2 + 3*lambda*delta.square*(sigma.square+lambda*delta.square)+lambda*delta.square^3)
least.square.obj = 10e5*((theo.moment.1 - emp.moment.1)^2 + (theo.moment.2 - emp.moment.2)^2 + (theo.moment.4 - emp.moment.4)^2 + (theo.moment.6 - emp.moment.6)^2)
}
optim(c(0, 0.01, 0.03, 0.0005), moment.diff)
moment.diff = function(data.input){
mu = data.input[1]
sigma.square = data.input[2]
lambda = data.input[3]
delta.square = data.input[4]
theo.moment.1 = mu - sigma.square / 2
theo.moment.2 = sigma.square + lambda * delta.square
theo.moment.4 = 3 * ((sigma.square+lambda*delta.square)^2 + lambda*delta.square^2)
theo.moment.6 = 15 * ((sigma.square+lambda*delta.square)^2 + 3*lambda*delta.square*(sigma.square+lambda*delta.square)+lambda*delta.square^3)
least.square.obj = 1e5*((theo.moment.1 - emp.moment.1)^2 + (theo.moment.2 - emp.moment.2)^2 + (theo.moment.4 - emp.moment.4)^2 + (theo.moment.6 - emp.moment.6)^2)
}
optim(c(0, 0.01, 0.03, 0.0005), moment.diff)
optim(c(0, 0.1, 0.03, 0.0005), moment.diff)
optim(c(0, 0.06, 0.03, 0.0005), moment.diff)
optim(c(0, 0.006, 0.03, 0.0005), moment.diff)
emp.moment.1
emp.moment.2
output = optim(c(0, 0.006, 0.03, 0.0005), moment.diff)
output
head(t_bill_3M_values)
setwd('D:\\PhD FE\\Empirical-Asset-Pricing\\Assignment 1')
t_bill_3M_values = read.csv('TB3MS.csv', header = TRUE)
head(t_bill_3M_values)
t_bill_3M_values[,2] = t_bill_3M_values[,2] / 12 / 100
head(t_bill_3M_values)
?mle
library(stats4)
LL=function(phi,beta,sigma){
(length(rate_data)+1)*log(sigma)+1/2/sigma^2*sum((rate_data-beta*(1-phi)-phi*rate_data)^2)+(1-phi^2)/(2*sigma^2)*(rate_data[1]-beta)^2-log(1-phi*2)/2
}
rate_data = t_bill_3M_values[,2]
corr(rate_data)
L
l
lag
lag(c(1,2,3))
?lag
?corr
?cor
moment.diff(c(0, 0.006, 0.03, 0.0005))
?function
moment.diff = function(data.input){
mu = data.input[1]
sigma.square = data.input[2]
lambda = data.input[3]
delta.square = data.input[4]
theo.moment.1 = mu - sigma.square / 2
theo.moment.2 = sigma.square + lambda * delta.square
theo.moment.4 = 3 * ((sigma.square+lambda*delta.square)^2 + lambda*delta.square^2)
theo.moment.6 = 15 * ((sigma.square+lambda*delta.square)^2 + 3*lambda*delta.square*(sigma.square+lambda*delta.square)+lambda*delta.square^3)
least.square.obj = (theo.moment.1 - emp.moment.1)^2 + (theo.moment.2 - emp.moment.2)^2 + (theo.moment.4 - emp.moment.4)^2 + (theo.moment.6 - emp.moment.6)^2
return(least.square.obj)
}
moment.diff(c(0, 0.006, 0.03, 0.0005))
output = optim(c(0, 0.006, 0.03, 0.0005), moment.diff)
output$par
a = c(1,2,3)
a[0]
rate_data = t_bill_3M_values[,2]
LL=function(phi,X.bar,sigma.sq){
N = length(rate_data)
obj = 0.5 * log(1-phi^2) - (N+1)/2*log(sigma.sq) - 0.5 * (1 - phi^2) * (rate_data[1] - X.bar)^2 / sigma.sq
+ (1/2/sigma.sq) * sum((rate_data[2:(length(rate_data))] - X.bar * (1 - phi) -  rate_data[1:(length(rate_data)-1)])^2)
return(obj)
}
mle(LL, start = list(phi = cor(rate_data[1:(length(rate_data)-1)], rate_data[2:(length(rate_data))]),
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
t_bill_3M_values = read.csv('TB3MS.csv', header = TRUE)
rate_data = t_bill_3M_values[,2]
head(rate_data)
LL=function(phi,X.bar,sigma.sq){
N = length(rate_data)
obj = 0.5 * log(1-phi^2) - (N+1)/2*log(sigma.sq) - 0.5 * (1 - phi^2) * (rate_data[1] - X.bar)^2 / sigma.sq
+ (1/2/sigma.sq) * sum((rate_data[2:(length(rate_data))] - X.bar * (1 - phi) -  rate_data[1:(length(rate_data)-1)])^2)
return(obj)
}
mle(LL, start = list(phi = cor(rate_data[1:(length(rate_data)-1)], rate_data[2:(length(rate_data))]),
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
warnings()
pjo
phi
cor(rate_data[1:(length(rate_data)-1)]
)
cor(rate_data[1:(length(rate_data)-1)], rate_data[2:(length(rate_data))]
)
mle(LL, start = list(phi = 0.5,
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
warnings()
mle(LL, start = list(phi = 0.1,
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
mle(LL, start = list(phi = 0.01,
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
mle(LL, start = list(phi = 0.8,
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
?mle
LL(0.8, 0.1,0.2)
LL(0.9, 0.1,0.2)
LL(0.1, 0.1,0.2)
mean(rate_data)
LL(0.1, 4.5,0.2)
var(rate_data)
LL(0.1, 4.5,9.5)
LL(0.9, 4.5,9.5)
log(0)
phi = 1.5
while (phi >= 1){
phi = phi / 2
}
phi
LL=function(phi,X.bar,sigma.sq){
N = length(rate_data)
while (abs(phi) >= 1){
phi = phi / 2
}
obj = 0.5 * log(1-phi^2) - (N+1)/2*log(sigma.sq) - 0.5 * (1 - phi^2) * (rate_data[1] - X.bar)^2 / sigma.sq
+ (1/2/sigma.sq) * sum((rate_data[2:(length(rate_data))] - X.bar * (1 - phi) -  rate_data[1:(length(rate_data)-1)])^2)
return(obj)
}
mle(LL, start = list(phi = 0.8,
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
mle(LL, start = list(phi = 0.1,
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
mean(rate_data)
mle(LL, start = list(phi = 0.01,
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
mle(LL, start = list(phi = 0.1,
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
var(rate_data)
mle(LL, start = list(phi = 0.1,
X.bar = mean(rate_data), sigma.sq=2))
mle(LL, start = list(phi = 0.1,
X.bar = mean(rate_data), sigma.sq=20))
t_bill_3M_values[,2] = t_bill_3M_values[,2] / 12 / 100
ir_full = t_bill_3M_values
rate_data = t_bill_3M_values[,2]
LL=function(phi,X.bar,sigma.sq){
N = length(rate_data)
while (abs(phi) >= 1){
phi = phi / 2
}
obj = 0.5 * log(1-phi^2) - (N+1)/2*log(sigma.sq) - 0.5 * (1 - phi^2) * (rate_data[1] - X.bar)^2 / sigma.sq
+ (1/2/sigma.sq) * sum((rate_data[2:(length(rate_data))] - X.bar * (1 - phi) -  rate_data[1:(length(rate_data)-1)])^2)
return(obj)
}
mle(LL, start = list(phi = 0.1,
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
var(rate_data)
mle(LL, start = list(phi = 0.1,
X.bar = mean(rate_data), sigma.sq=0.1))
mle(LL, start = list(phi = 0.1,
X.bar = mean(rate_data), sigma.sq=0.15))
mle(LL, start = list(phi = 0.1,
X.bar = mean(rate_data), sigma.sq=2))
mle(LL, start = list(phi = 0.9,
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
mle(LL, start = list(phi = 0.9,
X.bar = mean(rate_data), sigma.sq=100*var(rate_data)))
mle(LL, start = list(phi = 0.6,
X.bar = mean(rate_data), sigma.sq=var(rate_data)))
