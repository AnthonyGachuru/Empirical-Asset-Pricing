1775*6.2
?apply
q()
version
install.packages("BaPreStoPro")
require("BaPreStoPro")
showMethods(esitmate)
showMethods(estimate)
getMethods(estimate,"Diffusion")
getMethod(estimate, "Diffusion")
?estimate
1:5
model <- set.to.class("Diffusion", parameter = list(phi = mean(spx_index_values$Return), gamma2 = var(spx_index_values$Return)))
setwd('C:\\Users\\ranzhao\\Documents\\Empirical-Asset-Pricing\\Assignment 2')
require(pscl)
spx_index_values = read.csv('spx_index_values.csv', header = TRUE)
plot(as.Date(as.character(spx_index_values$Date), "%m/%d/%Y"), spx_index_values$SPX.Index, type='l',
main='SPX index levels, from 1954 to 2015',
xlab='year', ylab='SPX index')
spx_index_values$Return = rep(0, dim(spx_index_values)[1])
spx_index_values$Return[2:length(spx_index_values$Return)] =
# calculate the return series
log(spx_index_values$SPX.Index[2:length(spx_index_values$SPX.Index)] /
spx_index_values$SPX.Index[1:(length(spx_index_values$SPX.Index)-1)])
data.length = length(spx_index_values$Return)
# Black-Scholes model with Bayesian MCMC
simulation.length = 1000
mu.vector = rep(0, simulation.length)
sigma2.vector = rep(0, simulation.length)
# initialize the parameters (priors)
mu.vector[1] = mean(spx_index_values$Return)
sigma2.vector[1] = var(spx_index_values$Return)
alpha = 1000
beta = 0.2
theta = 0
delta2 = 0.001
for (i in 2:simulation.length){
sigma2.vector[i] = rigamma(1,alpha+0.5*data.length, beta+0.5*sum((spx_index_values$Return - mu.vector[i-1])^2))
delta.star.2 = 1/(data.length/sigma2.vector[i-1] + 1/delta2)
mu.vector[i] = rnorm(1,(sum(spx_index_values$Return)/sigma2.vector[i-1]+theta/delta2)*delta.star.2, sqrt(delta.star.2))
}
plot(mu.vector, type='l')
plot(sigma2.vector, type='l')
require(pscl)
install.packages(pscl)
install.packages("pscl")
require(pscl)
for (i in 2:simulation.length){
sigma2.vector[i] = rigamma(1,alpha+0.5*data.length, beta+0.5*sum((spx_index_values$Return - mu.vector[i-1])^2))
delta.star.2 = 1/(data.length/sigma2.vector[i-1] + 1/delta2)
mu.vector[i] = rnorm(1,(sum(spx_index_values$Return)/sigma2.vector[i-1]+theta/delta2)*delta.star.2, sqrt(delta.star.2))
}
plot(mu.vector, type='l')
plot(sigma2.vector, type='l')
model <- set.to.class("Diffusion", parameter = list(phi = mean(spx_index_values$Return), gamma2 = var(spx_index_values$Return)))
est_diff <- estimate(model, t, spx_index_values$Return, 1000)
t <- seq(1, 1000, by = 1)
est_diff <- estimate(model, t, spx_index_values$Return, 1000)
est_diff <- estimate(model, 1:length(spx_index_values$Return), spx_index_values$Return, 1000)
plot(est_diff)
est_diff
names(est_diff)
typeof(est_diff)
showMethods(est_diff)
slotNames(est_diff)
est_diff$model
est_diff@model
est_diff@phi
est_diff@gamma2
# Black-Scholes model with Bayesian MCMC
simulation.length = 1000
mu.vector = rep(0, simulation.length)
sigma2.vector = rep(0, simulation.length)
# initialize the parameters (priors)
mu.vector[1] = mean(spx_index_values$Return)
sigma2.vector[1] = var(spx_index_values$Return)
alpha = 1000
beta = 0.2
theta = 0
delta2 = 0.001
for (i in 2:simulation.length){
sigma2.vector[i] = rigamma(1,alpha+0.5*data.length, beta+0.5*sum((spx_index_values$Return - mu.vector[i-1])^2))
delta.star.2 = 1/(data.length/sigma2.vector[i-1] + 1/delta2)
mu.vector[i] = rnorm(1,(sum(spx_index_values$Return)/sigma2.vector[i-1]+theta/delta2)*delta.star.2, sqrt(delta.star.2))
}
plot(mu.vector, type='l')
summary(mu.vector)
quantile(mu.vector, 0.25)
quantile(mu.vector, 0.5)
quantile.mu.vector = c(quantile(mu.vector, 0.05), quantile(mu.vector, 0.5), quantile(mu.vector, 0.95))
quantile.mu.vector
plot(mu.vector, type='l', xlab='mu',xlim=c(1001,2000),main='MCMC estimation for mu')
getMethod(estimate,"Diffusion")
model <- set.to.class("jumpDiffusion", Lambda = function(t, xi) (t/xi[2])^xi[1],
parameter = list(theta = 0.1, phi = 0.05, gamma2 = 0.1, xi = c(3, 1/4)))
est <- estimate(model, 1:length(spx_index_values$Return), spx_index_values$Return, 2000)
plot(est)
est <- estimate(model, 1:length(spx_index_values$Return), spx_index_values$Return, 2000)
setwd('C:\\Users\\ranzhao\\Documents\\Empirical-Asset-Pricing\\Assignment 2')
require(pscl)
# Data loading
spx_index_values = read.csv('spx_index_values.csv', header = TRUE)
par(mfrow=c(2,2))
plot(as.Date(as.character(spx_index_values$Date), "%m/%d/%Y"), spx_index_values$SPX.Index, type='l',
main='SPX index levels, from 1954 to 2015',
xlab='year', ylab='SPX index')
par(mfrow=c(2,1))
plot(as.Date(as.character(spx_index_values$Date), "%m/%d/%Y"), spx_index_values$SPX.Index, type='l',
main='SPX index levels, from 1954 to 2015',
xlab='year', ylab='SPX index')
# calculate the return series
spx_index_values$Return = rep(0, dim(spx_index_values)[1])
spx_index_values$Return[2:length(spx_index_values$Return)] =
log(spx_index_values$SPX.Index[2:length(spx_index_values$SPX.Index)] /
spx_index_values$SPX.Index[1:(length(spx_index_values$SPX.Index)-1)])
data.length = length(spx_index_values$Return)
plot(as.Date(as.character(spx_index_values$Date), "%m/%d/%Y"), spx_index_values$Return, type='l',
main='SPX index returns, from 1954 to 2015',
xlab='year', ylab='SPX returns')
