?seq
seq(0,1,0.01)
?hessian
library(numDeriv)
?hessian
library(MASS)
data(cats)
u <- mean(cats$Hwt)
v <- var(cats$Hwt)
s <- v/u
a <- u^2/v
H<-hessian(gamma.loglike, fit.mle$argmin)
inverse.H <- solve(H) #get an inverse matrix
var.estimates <- -inverse.H
se.estimates <- sqrt(var.estimates)
gamma.loglike(c(a,s))
gradient.descent <- function(f, x, max.iterations, step.scale, stopping.deriv,...) Â {
for (iteration in 1:max.iterations) {
gradient <- grad(f,x,...)
if(all(abs(gradient) < stopping.deriv)) { break() }
x <- x - step.scale*gradient
}
fit <- list(argmin = x, final.gradient = gradient, final.value = f(x,...),
iterations = iteration)
return(fit)
}
H<-hessian(gamma.loglike, fit.mle$argmin)
inverse.H <- solve(H) #get an inverse matrix
var.estimates <- -inverse.H
se.estimates <- sqrt(var.estimates)
make.gamma.loglike <- function(x=cats$Hwt) {
gamma.loglike <- function(p) {
return(sum(dgamma(x, shape = p[1], scale = p[2], log = TRUE)))
}
return(gamma.loglike)
}
H<-hessian(gamma.loglike, fit.mle$argmin)
inverse.H <- solve(H) #get an inverse matrix
var.estimates <- -inverse.H
se.estimates <- sqrt(var.estimates)
gamma.loglike <- function(p) {
return(sum(dgamma(x, shape = p[1], scale = p[2], log = TRUE)))
}
return(gamma.loglike)
gamma.loglike <- function(p) {
return(sum(dgamma(x, shape = p[1], scale = p[2], log = TRUE)))
}
H<-hessian(gamma.loglike, fit.mle$argmin)
inverse.H <- solve(H) #get an inverse matrix
var.estimates <- -inverse.H
se.estimates <- sqrt(var.estimates)
gamma.loglike <- function(p) {
return(sum(dgamma(cats$Hwt, shape = p[1], scale = p[2], log = TRUE)))
}
H<-hessian(gamma.loglike, fit.mle$argmin)
inverse.H <- solve(H) #get an inverse matrix
var.estimates <- -inverse.H
se.estimates <- sqrt(var.estimates)
fit.mle <- gradient.descent(f = gamma.loglike, x = c(a,s), max.iterations=1e4,
step.scale = c(-1e-2, -1e-4), stopping.deriv = 1e-4)
H<-hessian(gamma.loglike, fit.mle$argmin)
inverse.H <- solve(H) #get an inverse matrix
var.estimates <- -inverse.H
se.estimates <- sqrt(var.estimates)
se.estimates
H
var.estimates
setwd('C:\\Users\\ranzhao\\Documents\\Empirical-Asset-Pricing\\Assignment 2')
setwd('D:\\PhD FE\\Empirical-Asset-Pricing\\Assignment 2')
setwd('D:\\Empirical-Asset-Pricing\\Assignment 2')
gamma=10
psi=1.5
theta=(1-gamma)/(1-1/psi)
kappa1=0.997
kappa.1m=0.96 #as in the slides
delta=0.998
mu=0.0015
mu.d=0.0015
pho=0.979
sigma=0.0078
Phi=3
phi.e=0.044
phi.d=4.5
nu1=0.987
sigma.w=0.23/(10^5)
A1=(1-1/psi)/(1-kappa1*pho)
A2=0.5*((theta-theta/psi)^2+(theta*A1*kappa1*phi.e)^2)/(theta*(1-kappa1*nu1))
B=kappa1*A1*phi.e
lambda.m.eta=-gamma
lambda.me=(1-theta)*B
lambda.mw=(1-theta)*A2*kappa1
A.1m=(Phi-1/psi)/(1-kappa.1m*pho)
beta.me=kappa.1m*A.1m*phi.e
Hm=lambda.m.eta^2+(-lambda.me+beta.me)^2+phi.d^2
A.2m=((1-theta)*A2*(1-kappa1*nu1)+0.5*Hm)/(1-kappa.1m*nu1)
beta.mw=kappa1*A.2m
w=rnorm(1000,0,1)
sigma.squared=rep(0,1000)
sigma.squared[1]=0.0078^2
for (i in 2:1000){
sigma.squared[i]=sigma^2+nu1*(sigma.squared[i-1]-sigma^2)+sigma.w*w[i]
}
var.rm=rep(0,1000)
risk.premium=rep(0,1000)
for (i in 1:1000){
var.rm[i]=(beta.me^2+phi.d^2)*sigma.squared[i]+beta.mw^2*sigma.w^2
risk.premium[i]=beta.me*lambda.me*sigma.squared[i]+beta.mw*lambda.mw*sigma.w^2-
0.5*var.rm[i]
}
var.ra=rep(0,1000)
risk.premium.ra=rep(0,1000)
for (i in 1:1000){
var.ra[i]=(1+B^2)*sigma.squared[i]+(A2*kappa1)^2*sigma.w^2
risk.premium.ra[i]=-lambda.m.eta*sigma.squared[i]+lambda.me*B*sigma.squared[i]+
kappa1*A2*lambda.mw*sigma.w^2-0.5*var.ra[i]
}
eta=rnorm(1000,0,1)
e=rnorm(1000,0,1)
g=rep(0,1000)
x=rep(0,1000)
x[1]=0.0003
for (i in 2:1000){
g[i]=mu+x[i-1]+sigma.squared[i-1]^0.5*eta[i]
x[i]=pho*x[i-1]+phi.e*sigma.squared[i-1]^0.5*e[i]
}
rf=-log(delta)+1/psi*mean(g)+(1-theta)/theta*mean(risk.premium.ra)-
1/(2*theta)*((lambda.m.eta^2+lambda.me^2)*mean(sigma.squared)+lambda.mw^2*sigma.w^2)
rf
mean(risk.premium)
rf
setwd('C:\\Users\\ranzhao\\Documents\\Empirical-Asset-Pricing\\Assignment 2')
setwd('D:\\PhD FE\\Empirical-Asset-Pricing\\Assignment 2')
setwd('D:\\Empirical-Asset-Pricing\\Assignment 2')
gamma=10
psi=1.5
theta=(1-gamma)/(1-1/psi)
kappa1=0.997
kappa.1m=0.96 #as in the slides
delta=0.998
mu=0.0015
mu.d=0.0015
pho=0.979
sigma=0.0078
Phi=3
phi.e=0.044
phi.d=4.5
nu1=0.987
sigma.w=0.23/(10^5)
A1=(1-1/psi)/(1-kappa1*pho)
A2=0.5*((theta-theta/psi)^2+(theta*A1*kappa1*phi.e)^2)/(theta*(1-kappa1*nu1))
B=kappa1*A1*phi.e
lambda.m.eta=-gamma
lambda.me=(1-theta)*B
lambda.mw=(1-theta)*A2*kappa1
A.1m=(Phi-1/psi)/(1-kappa.1m*pho)
beta.me=kappa.1m*A.1m*phi.e
Hm=lambda.m.eta^2+(-lambda.me+beta.me)^2+phi.d^2
A.2m=((1-theta)*A2*(1-kappa1*nu1)+0.5*Hm)/(1-kappa.1m*nu1)
beta.mw=kappa1*A.2m
w=rnorm(1000,0,1)
sigma.squared=rep(0,1000)
sigma.squared[1]=0.0078^2
for (i in 2:1000){
sigma.squared[i]=sigma^2+nu1*(sigma.squared[i-1]-sigma^2)+sigma.w*w[i]
}
var.rm=rep(0,1000)
risk.premium=rep(0,1000)
for (i in 1:1000){
var.rm[i]=(beta.me^2+phi.d^2)*sigma.squared[i]+beta.mw^2*sigma.w^2
risk.premium[i]=beta.me*lambda.me*sigma.squared[i]+beta.mw*lambda.mw*sigma.w^2-
0.5*var.rm[i]
}
var.ra=rep(0,1000)
risk.premium.ra=rep(0,1000)
for (i in 1:1000){
var.ra[i]=(1+B^2)*sigma.squared[i]+(A2*kappa1)^2*sigma.w^2
risk.premium.ra[i]=-lambda.m.eta*sigma.squared[i]+lambda.me*B*sigma.squared[i]+
kappa1*A2*lambda.mw*sigma.w^2-0.5*var.ra[i]
}
eta=rnorm(1000,0,1)
e=rnorm(1000,0,1)
g=rep(0,1000)
x=rep(0,1000)
x[1]=0.0003
for (i in 2:1000){
g[i]=mu+x[i-1]+sigma.squared[i-1]^0.5*eta[i]
x[i]=pho*x[i-1]+phi.e*sigma.squared[i-1]^0.5*e[i]
}
rf=-log(delta)+1/psi*mean(g)+(1-theta)/theta*mean(risk.premium.ra)-
1/(2*theta)*((lambda.m.eta^2+lambda.me^2)*mean(sigma.squared)+lambda.mw^2*sigma.w^2)
mean(risk.premium)
rf
