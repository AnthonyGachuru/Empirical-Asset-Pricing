alpha.fitted = as.numeric(fitted.model.50$coefficients[1])
beta.fitted = as.numeric(fitted.model.50$coefficients[2])
sigma = sd(fitted.model.50$residuals)
c(alpha.fitted, beta.fitted, sigma)
?data.frame
?list
?`data.frame
?data.frame
data.frame(1:2, dimnames = list(c(), c("a",'b')))
data.frame(1:2, nrow=1,dimnames = list(c(), c("a",'b')))
data.frame(1:2, nrow=1
)
?matrix
?rt
dt(1.96, 50)
pt(1.96, 50)
qt(0.01, 50)
ar.parameter.inference <- function(n=50,alpha=0,beta=1,sigma=0.2,p0=0){
# simulate the return process
p.series = rep(0, n)
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias = alpha.fit - alpha
beta.bias = beta.fit - beta
sigma.bias = sigma.fit - sigma
# beta inference
se = sigma.fit / sqrt(sum(fitted.model$residuals^2))
t.stat.1p = qt(0.01, n-2) - (1/se)
t.stat.5p = qt(0.05, n-2) - (1/se)
#output
p.out = c()
p.out$fitted.coefficients = matrix(c(alpha.fit, beta.fit, sigma.fit), nrow=1, dimnames=list(c(),c("alpha","beta","sigma")))
p.out$bias = matrix(c(alpha.bias, beta.bias, sigma.bias), nrow=1, dimnames=list(c(),c("alpha","beta","sigma")))
p.out$t.stats = matrix(c(t.stat.1p, t.stat.5p))
return(p.out)
}
ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=0)
ar.parameter.inference(n=600,alpha=0,beta=1,sigma=0.2,p0=0)
ar.parameter.inference(n=50,alpha=0,beta=0.95,sigma=0.2,p0=0)
ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=0)
ar.parameter.inference(n=600,alpha=0,beta=1,sigma=0.2,p0=0)
ar.parameter.inference(n=50,alpha=0,beta=0.95,sigma=0.2,p0=0)
qt(0.01,48)
ar.parameter.inference <- function(n=50,alpha=0,beta=1,sigma=0.2,p0=0){
# simulate the return process
p.series = rep(0, n)
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias = alpha.fit - alpha
beta.bias = beta.fit - beta
sigma.bias = sigma.fit - sigma
# beta inference
se = sigma.fit / sqrt(sum((p.series-mean(p.series))^2))
t.stat.1p = qt(0.01, n-2) - (1/se)
t.stat.5p = qt(0.05, n-2) - (1/se)
#output
p.out = c()
p.out$fitted.coefficients = matrix(c(alpha.fit, beta.fit, sigma.fit), nrow=1, dimnames=list(c(),c("alpha","beta","sigma")))
p.out$bias = matrix(c(alpha.bias, beta.bias, sigma.bias), nrow=1, dimnames=list(c(),c("alpha","beta","sigma")))
p.out$t.stats = matrix(c(t.stat.1p, t.stat.5p))
return(p.out)
}
qt(0.01,48)
ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=0)
ar.parameter.inference(n=600,alpha=0,beta=1,sigma=0.2,p0=0)
ar.parameter.inference(n=50,alpha=0,beta=0.95,sigma=0.2,p0=0)
n=50,alpha=0,beta=1,sigma=0.2,p0=0
n=50;alpha=0;beta=1;sigma=0.2;p0=0
# simulate the return process
p.series = rep(0, n)
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias = alpha.fit - alpha
beta.bias = beta.fit - beta
sigma.bias = sigma.fit - sigma
# beta inference
se = sigma.fit / sqrt(sum((p.series-mean(p.series))^2))
t.stat.1p = qt(0.01, n-2) - (1/se)
t.stat.5p = qt(0.05, n-2) - (1/se)
se
sigma.fit
setwd('C:\\Users\\ranzhao\\Documents\\Empirical-Asset-Pricing\\Assignment 3')
ar.parameter.inference <- function(n=50,alpha=0,beta=1,sigma=0.2,p0=0){
# simulate the return process
p.series = rep(0, n)
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias = alpha.fit - alpha
beta.bias = beta.fit - beta
sigma.bias = sigma.fit - sigma
# beta inference
se = sigma.fit / sqrt(sum((p.series-mean(p.series))^2))
t.stat.1p = qt(0.01, n-2) - (1/se)
t.stat.5p = qt(0.05, n-2) - (1/se)
#output
p.out = c()
p.out$fitted.coefficients = matrix(c(alpha.fit, beta.fit, sigma.fit), nrow=1, dimnames=list(c(),c("alpha","beta","sigma")))
p.out$bias = matrix(c(alpha.bias, beta.bias, sigma.bias), nrow=1, dimnames=list(c(),c("alpha","beta","sigma")))
p.out$t.stats = matrix(c(t.stat.1p, t.stat.5p))
return(p.out)
}
ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=0)
log(100)
log(2.71)
setwd('C:\\Users\\ranzhao\\Documents\\Empirical-Asset-Pricing\\Assignment 3')
setwd('C:\\Users\\ranzhao\\Documents\\Empirical-Asset-Pricing\\Assignment 3')
n=50;alpha=0;beta=1;sigma=0.2;p0=log(100);N=10
# simulate the log stock price process
alpha.bias = rep(0,N)
beta.bias = rep(0,N)
sigma.bias = rep(0,N)
# simulation loop
for (j in 1:N){
p.series = rep(0, n)
# time loop
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias[j] = alpha.fit - alpha
beta.bias[j] = beta.fit - beta
sigma.bias[j] = sigma.fit - sigma
}
sigma.bias
cbind(alpha.bias,beta.bias,sigma.bias)
ar.parameter.inference <- function(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000){
# simulate the log stock price process
alpha.bias = rep(0,N)
beta.bias = rep(0,N)
sigma.bias = rep(0,N)
# simulation loop
for (j in 1:N){
p.series = rep(0, n)
# time loop
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias[j] = alpha.fit - alpha
beta.bias[j] = beta.fit - beta
sigma.bias[j] = sigma.fit - sigma
}
# beta inference
#se = sigma.fit / sqrt(sum((p.series-mean(p.series))^2))
#t.stat.1p = qt(0.01, n-2) - (1/se)
#t.stat.5p = qt(0.05, n-2) - (1/se)
#output
p.out = c()
#p.out$fitted.coefficients = matrix(c(alpha.fit, beta.fit, sigma.fit), nrow=1, dimnames=list(c(),c("alpha","beta","sigma")))
p.out$bias = cbind(alpha.bias, beta.bias, sigma.bias)
#p.out$t.stats = matrix(c(t.stat.1p, t.stat.5p))
return(p.out)
}
ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000)
T50alpha0beta1sigma0p2 = results = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000)
T50alpha0beta1sigma0p2
names(T50alpha0beta1sigma0p2)
mean(T50alpha0beta1sigma0p2$bias)
T50alpha0beta1sigma0p2$bias[,1]
mean(T50alpha0beta1sigma0p2$bias[,1])
mean(T50alpha0beta1sigma0p2$bias[,2])
mean(T50alpha0beta1sigma0p2$bias[,3])
c(mean(T50alpha0beta1sigma0p2$bias[,1]), mean(T50alpha0beta1sigma0p2$bias[,2]), mean(T50alpha0beta1sigma0p2$bias[,3]))
T50alpha0beta1sigma0p2 = results = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(T50alpha0beta1sigma0p2$bias[,1]), mean(T50alpha0beta1sigma0p2$bias[,2]), mean(T50alpha0beta1sigma0p2$bias[,3]))
# question (a) i
T50alpha0beta1sigma0p2 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(T50alpha0beta1sigma0p2$bias[,1]), mean(T50alpha0beta1sigma0p2$bias[,2]), mean(T50alpha0beta1sigma0p2$bias[,3]))
# question (a) ii
alpha.bump.results1 = ar.parameter.inference(n=50,alpha=0.2,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(alpha.bump.results1$bias[,1]), mean(alpha.bump.results1$bias[,2]), mean(alpha.bump.results1$bias[,3]))
alpha.bump.results2 = ar.parameter.inference(n=50,alpha=-0.2,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(alpha.bump.results2$bias[,1]), mean(alpha.bump.results2$bias[,2]), mean(alpha.bump.results2$bias[,3]))
sigma.bump.results1 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.1,p0=log(100),N=10000)
c(mean(sigma.bump.results1$bias[,1]), mean(sigma.bump.results1$bias[,2]), mean(sigma.bump.results1$bias[,3]))
sigma.bump.results2 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.3,p0=log(100),N=10000)
c(mean(sigma.bump.results2$bias[,1]), mean(sigma.bump.results2$bias[,2]), mean(sigma.bump.results2$bias[,3]))
ar.parameter.inference <- function(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000){
# simulate the log stock price process
alpha.bias = rep(0,N)
beta.bias = rep(0,N)
sigma.bias = rep(0,N)
t.stats = rep(0,N)
# simulation loop
for (j in 1:N){
p.series = rep(0, n)
# time loop
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias[j] = alpha.fit - alpha
beta.bias[j] = beta.fit - beta
sigma.bias[j] = sigma.fit - sigma
t.stats[j] = as.numeric((fitted.model$coefficients[2]-1)/fitted.model$coefficients[4])
}
#output
p.out = c()
p.out$bias = cbind(alpha.bias, beta.bias, sigma.bias)
p.out$t.stats = t.stats
return(p.out)
}
# question (a) i
T50alpha0beta1sigma0p2 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(T50alpha0beta1sigma0p2$bias[,1]), mean(T50alpha0beta1sigma0p2$bias[,2]), mean(T50alpha0beta1sigma0p2$bias[,3]))
quantile(T50alpha0beta1sigma0p2$t.stats,c(0.01,0.05))
# question (a) ii
alpha.bump.results1 = ar.parameter.inference(n=50,alpha=0.2,beta=1,sigma=0.2,p0=log(100),N=10000)
T50alpha0beta1sigma0p2$t.stats
N
j
p.series = rep(0, n)
# time loop
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias[j] = alpha.fit - alpha
beta.bias[j] = beta.fit - beta
sigma.bias[j] = sigma.fit - sigma
fitted.model$coefficients[4]
fitted.model
summary(fitted.model)
summ = summary(fitted.model)
summ$coefficients
summ$coefficients[4]
# question (a) i
T50alpha0beta1sigma0p2 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(T50alpha0beta1sigma0p2$bias[,1]), mean(T50alpha0beta1sigma0p2$bias[,2]), mean(T50alpha0beta1sigma0p2$bias[,3]))
# question (a) iii
quantile(T50alpha0beta1sigma0p2$t.stats,c(0.01,0.05))
# question (a) ii
alpha.bump.results1 = ar.parameter.inference(n=50,alpha=0.2,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(alpha.bump.results1$bias[,1]), mean(alpha.bump.results1$bias[,2]), mean(alpha.bump.results1$bias[,3]))
alpha.bump.results2 = ar.parameter.inference(n=50,alpha=-0.2,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(alpha.bump.results2$bias[,1]), mean(alpha.bump.results2$bias[,2]), mean(alpha.bump.results2$bias[,3]))
sigma.bump.results1 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.1,p0=log(100),N=10000)
c(mean(sigma.bump.results1$bias[,1]), mean(sigma.bump.results1$bias[,2]), mean(sigma.bump.results1$bias[,3]))
sigma.bump.results2 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.3,p0=log(100),N=10000)
c(mean(sigma.bump.results2$bias[,1]), mean(sigma.bump.results2$bias[,2]), mean(sigma.bump.results2$bias[,3]))
# question (a) iv
T600alpha0beta1sigma0p2 = ar.parameter.inference(n=600,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000)
quantile(T600alpha0beta1sigma0p2$t.stats,c(0.01,0.05))
p.series = rep(0, n)
# time loop
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
summ = summary(fitted.model)
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias[j] = alpha.fit - alpha
beta.bias[j] = beta.fit - beta
sigma.bias[j] = sigma.fit - sigma
summ
as.numeric((summ$coefficients[2]-1)/summ$coefficients[4])
t.stats
t.stats = rep(0,N)
for (j in 1:N){
p.series = rep(0, n)
# time loop
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
summ = summary(fitted.model)
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias[j] = alpha.fit - alpha
beta.bias[j] = beta.fit - beta
sigma.bias[j] = sigma.fit - sigma
t.stats[j] = as.numeric((summ$coefficients[2]-1)/summ$coefficients[4])
}
t.stats
quantile(t.stats,c(0.01,0.05))
ar.parameter.inference <- function(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000){
# simulate the log stock price process
alpha.bias = rep(0,N)
beta.bias = rep(0,N)
sigma.bias = rep(0,N)
t.stats = rep(0,N)
# simulation loop
for (j in 1:N){
p.series = rep(0, n)
# time loop
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
summ = summary(fitted.model)
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias[j] = alpha.fit - alpha
beta.bias[j] = beta.fit - beta
sigma.bias[j] = sigma.fit - sigma
t.stats[j] = as.numeric((summ$coefficients[2]-1)/summ$coefficients[4])
}
#output
p.out = c()
p.out$bias = cbind(alpha.bias, beta.bias, sigma.bias)
p.out$t.stats = t.stats
return(p.out)
}
T50alpha0beta1sigma0p2 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(T50alpha0beta1sigma0p2$bias[,1]), mean(T50alpha0beta1sigma0p2$bias[,2]), mean(T50alpha0beta1sigma0p2$bias[,3]))
# question (a) iii
quantile(T50alpha0beta1sigma0p2$t.stats,c(0.01,0.05))
T50alpha0beta1sigma0p2 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(T50alpha0beta1sigma0p2$bias[,1]), mean(T50alpha0beta1sigma0p2$bias[,2]), mean(T50alpha0beta1sigma0p2$bias[,3]))
quantile(T50alpha0beta1sigma0p2$t.stats,c(0.01,0.05))
# question (a) ii
alpha.bump.results1 = ar.parameter.inference(n=50,alpha=0.2,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(alpha.bump.results1$bias[,1]), mean(alpha.bump.results1$bias[,2]), mean(alpha.bump.results1$bias[,3]))
quantile(alpha.bump.results1$t.stats,c(0.01,0.05))
alpha.bump.results2 = ar.parameter.inference(n=50,alpha=-0.2,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(alpha.bump.results2$bias[,1]), mean(alpha.bump.results2$bias[,2]), mean(alpha.bump.results2$bias[,3]))
quantile(alpha.bump.results2$t.stats,c(0.01,0.05))
sigma.bump.results1 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.1,p0=log(100),N=10000)
c(mean(sigma.bump.results1$bias[,1]), mean(sigma.bump.results1$bias[,2]), mean(sigma.bump.results1$bias[,3]))
quantile(sigma.bump.results1$t.stats,c(0.01,0.05))
sigma.bump.results2 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.3,p0=log(100),N=10000)
c(mean(sigma.bump.results2$bias[,1]), mean(sigma.bump.results2$bias[,2]), mean(sigma.bump.results2$bias[,3]))
quantile(sigma.bump.results2$t.stats,c(0.01,0.05))
# question (a) iv
T600alpha0beta1sigma0p2 = ar.parameter.inference(n=600,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000)
ar.parameter.inference <- function(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000){
# simulate the log stock price process
alpha.bias = rep(0,N)
beta.bias = rep(0,N)
sigma.bias = rep(0,N)
t.stats = rep(0,N)
# simulation loop
for (j in 1:N){
p.series = rep(0, n)
# time loop
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
summ = summary(fitted.model)
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias[j] = alpha.fit - alpha
beta.bias[j] = beta.fit - beta
sigma.bias[j] = sigma.fit - sigma
t.stats[j] = as.numeric((summ$coefficients[2]-1)/summ$coefficients[4])
}
#output
p.out = c()
p.out$bias = cbind(alpha.bias, beta.bias, sigma.bias)
p.out$t.stats = t.stats
return(p.out)
}
# question (a) i, iii
T50alpha0beta1sigma0p2 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(T50alpha0beta1sigma0p2$bias[,1]), mean(T50alpha0beta1sigma0p2$bias[,2]), mean(T50alpha0beta1sigma0p2$bias[,3]))
quantile(T50alpha0beta1sigma0p2$t.stats,c(0.01,0.05))
# question (a) ii
alpha.bump.results1 = ar.parameter.inference(n=50,alpha=0.2,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(alpha.bump.results1$bias[,1]), mean(alpha.bump.results1$bias[,2]), mean(alpha.bump.results1$bias[,3]))
quantile(alpha.bump.results1$t.stats,c(0.01,0.05))
alpha.bump.results2 = ar.parameter.inference(n=50,alpha=-0.2,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(alpha.bump.results2$bias[,1]), mean(alpha.bump.results2$bias[,2]), mean(alpha.bump.results2$bias[,3]))
quantile(alpha.bump.results2$t.stats,c(0.01,0.05))
sigma.bump.results1 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.1,p0=log(100),N=10000)
c(mean(sigma.bump.results1$bias[,1]), mean(sigma.bump.results1$bias[,2]), mean(sigma.bump.results1$bias[,3]))
quantile(sigma.bump.results1$t.stats,c(0.01,0.05))
sigma.bump.results2 = ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.3,p0=log(100),N=10000)
c(mean(sigma.bump.results2$bias[,1]), mean(sigma.bump.results2$bias[,2]), mean(sigma.bump.results2$bias[,3]))
quantile(sigma.bump.results2$t.stats,c(0.01,0.05))
# question (a) iv
T600alpha0beta1sigma0p2 = ar.parameter.inference(n=600,alpha=0,beta=1,sigma=0.2,p0=log(100),N=10000)
c(mean(T600alpha0beta1sigma0p2$bias[,1]), mean(T600alpha0beta1sigma0p2$bias[,2]), mean(T600alpha0beta1sigma0p2$bias[,3]))
quantile(T600alpha0beta1sigma0p2$t.stats,c(0.01,0.05))
# question (b) i
T50alpha0beta0p95sigma0p2 = ar.parameter.inference(n=50,alpha=0,beta=0.95,sigma=0.2,p0=log(100),N=10000)
c(mean(T50alpha0beta0p95sigma0p2$bias[,1]), mean(T50alpha0beta0p95sigma0p2$bias[,2]), mean(T50alpha0beta0p95sigma0p2$bias[,3]))
quantile(T50alpha0beta0p95sigma0p2$t.stats,c(0.01,0.05))
log(100)
