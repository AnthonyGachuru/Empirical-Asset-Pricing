setwd('C:\\Users\\ranzhao\\Documents\\Empirical-Asset-Pricing\\Assignment 3')
?rnorm
simple.50 = simulate.linear.model(50)
simulate.linear.model <- function(n=50,alpha=0,beta=1,sigma=0.2,p0=0){
p.out = rep(0, n)
for (i in 1:n){
if (i == 1){
p[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p[i] = alpha + beta * p[i-1] + rnorm(1, 0, sigma)
}
}
return(p.out)
}
simple.50 = simulate.linear.model(50)
simulate.linear.model <- function(n=50,alpha=0,beta=1,sigma=0.2,p0=0){
p.out = rep(0, n)
for (i in 1:n){
if (i == 1){
p.out[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.out[i] = alpha + beta * p.out[i-1] + rnorm(1, 0, sigma)
}
}
return(p.out)
}
simple.50 = simulate.linear.model(50)
simple.50
simple.50 = simulate.linear.model(n=50)
simple.50
?lm
?ar
ar(simple.50)
ar(simple.50, method = "ols")
ar(simple.50, method = "ols", 1)
ar(simple.50, method = "ols", order.max - 1)
ar(simple.50, method = "ols", order.max = 1)
fitted.model.50 = lm(simple.50[2:50]~simple.50[1:49])
fitted.model.50
names(fitted.model.50)
fitted.model.50$residuals
sd(fitted.model.50$residuals)
var(fitted.model.50$residuals)
sd(fitted.model.50$residuals)*49/50
var(fitted.model.50$residuals)*49/50
fitted.model.50 = ar(simple.50, method = "ols", order.max = 1)
names(fitted.model.50)
fitted.model.50$resid
fitted.model.50$ar
fitted.model.50
var(fitted.model.50$resid)
fitted.model.50$resid[2:50]
var(fitted.model.50$resid[2:50])
sd(fitted.model.50$resid[2:50])
sqrtvar((fitted.model.50$resid[2:50])*49/50)
sqrt(var(fitted.model.50$resid[2:50])*49/50)
sample.50 = simulate.linear.model(n=50)
sample.50 = simulate.linear.model(n=50)
n50 = length(sample.50)
fitted.model.50 = lm(sample.50[2:n50]~sample.50[1:(n50-1)])
fitted.model.50
?lm
ar(simple.50, method = "ols", order.max = 1)
n50
fitted.model.50 = ar(simple.50, method = "ols", order.max = 1)
fitted.model.50
lm(sample.50[2:n50]~sample.50[1:(n50-1)])
ar(simple.50, method = "ols", order.max = 1)
sample.50 = simulate.linear.model(n=50)
ar(simple.50, method = "ols", order.max = 1)
sample.50 = simulate.linear.model(n=50)
n50 = length(sample.50)
lm(sample.50[2:n50]~sample.50[1:(n50-1)])
ar(sample.50, method = "ols", order.max = 1)
sample.50 = simulate.linear.model(n=50)
n50 = length(sample.50)
fitted.model.50 = lm(sample.50[2:n50]~sample.50[1:(n50-1)])
names(fitted.model.50)
fitted.model.50$coefficients
beta.fitted = fitted.model.50$coefficients[2]
# check ols regression using with lm
beta.fitted
sigma = sd(fitted.model.50$residuals)
sigma
sample.50 = simulate.linear.model(n=50)
n50 = length(sample.50)
fitted.model.50 = lm(sample.50[2:n50]~sample.50[1:(n50-1)])
alpha.fitted = as.numeric(fitted.model.50$coefficients[1])
beta.fitted = as.numeric(fitted.model.50$coefficients[2])
sigma = sd(fitted.model.50$residuals)
c(alpha.fitted, beta.fitted, sigma)
sample.50 = simulate.linear.model(n=50)
n50 = length(sample.50)
fitted.model.50 = lm(sample.50[2:n50]~sample.50[1:(n50-1)])
alpha.fitted = as.numeric(fitted.model.50$coefficients[1])
beta.fitted = as.numeric(fitted.model.50$coefficients[2])
sigma = sd(fitted.model.50$residuals)
c(alpha.fitted, beta.fitted, sigma)
?data.frame
?list
?`data.frame
?data.frame
data.frame(1:2, dimnames = list(c(), c("a",'b')))
data.frame(1:2, nrow=1,dimnames = list(c(), c("a",'b')))
data.frame(1:2, nrow=1
)
?matrix
?rt
dt(1.96, 50)
pt(1.96, 50)
qt(0.01, 50)
ar.parameter.inference <- function(n=50,alpha=0,beta=1,sigma=0.2,p0=0){
# simulate the return process
p.series = rep(0, n)
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias = alpha.fit - alpha
beta.bias = beta.fit - beta
sigma.bias = sigma.fit - sigma
# beta inference
se = sigma.fit / sqrt(sum(fitted.model$residuals^2))
t.stat.1p = qt(0.01, n-2) - (1/se)
t.stat.5p = qt(0.05, n-2) - (1/se)
#output
p.out = c()
p.out$fitted.coefficients = matrix(c(alpha.fit, beta.fit, sigma.fit), nrow=1, dimnames=list(c(),c("alpha","beta","sigma")))
p.out$bias = matrix(c(alpha.bias, beta.bias, sigma.bias), nrow=1, dimnames=list(c(),c("alpha","beta","sigma")))
p.out$t.stats = matrix(c(t.stat.1p, t.stat.5p))
return(p.out)
}
ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=0)
ar.parameter.inference(n=600,alpha=0,beta=1,sigma=0.2,p0=0)
ar.parameter.inference(n=50,alpha=0,beta=0.95,sigma=0.2,p0=0)
ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=0)
ar.parameter.inference(n=600,alpha=0,beta=1,sigma=0.2,p0=0)
ar.parameter.inference(n=50,alpha=0,beta=0.95,sigma=0.2,p0=0)
qt(0.01,48)
ar.parameter.inference <- function(n=50,alpha=0,beta=1,sigma=0.2,p0=0){
# simulate the return process
p.series = rep(0, n)
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias = alpha.fit - alpha
beta.bias = beta.fit - beta
sigma.bias = sigma.fit - sigma
# beta inference
se = sigma.fit / sqrt(sum((p.series-mean(p.series))^2))
t.stat.1p = qt(0.01, n-2) - (1/se)
t.stat.5p = qt(0.05, n-2) - (1/se)
#output
p.out = c()
p.out$fitted.coefficients = matrix(c(alpha.fit, beta.fit, sigma.fit), nrow=1, dimnames=list(c(),c("alpha","beta","sigma")))
p.out$bias = matrix(c(alpha.bias, beta.bias, sigma.bias), nrow=1, dimnames=list(c(),c("alpha","beta","sigma")))
p.out$t.stats = matrix(c(t.stat.1p, t.stat.5p))
return(p.out)
}
qt(0.01,48)
ar.parameter.inference(n=50,alpha=0,beta=1,sigma=0.2,p0=0)
ar.parameter.inference(n=600,alpha=0,beta=1,sigma=0.2,p0=0)
ar.parameter.inference(n=50,alpha=0,beta=0.95,sigma=0.2,p0=0)
n=50,alpha=0,beta=1,sigma=0.2,p0=0
n=50;alpha=0;beta=1;sigma=0.2;p0=0
# simulate the return process
p.series = rep(0, n)
for (i in 1:n){
if (i == 1){
p.series[i] = alpha + beta * p0 + rnorm(1, 0, sigma)
}
else{
p.series[i] = alpha + beta * p.series[i-1] + rnorm(1, 0, sigma)
}
}
# fit the parameters using ols
fitted.model = lm(p.series[2:n]~p.series[1:(n-1)])
# fitted parameters
alpha.fit = as.numeric(fitted.model$coefficients[1])
beta.fit = as.numeric(fitted.model$coefficients[2])
sigma.fit = sqrt(var(fitted.model$residuals)*(n-1)/(n-2))
# bias parameters
alpha.bias = alpha.fit - alpha
beta.bias = beta.fit - beta
sigma.bias = sigma.fit - sigma
# beta inference
se = sigma.fit / sqrt(sum((p.series-mean(p.series))^2))
t.stat.1p = qt(0.01, n-2) - (1/se)
t.stat.5p = qt(0.05, n-2) - (1/se)
se
sigma.fit
